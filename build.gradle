buildscript {
  repositories {
    maven {
      url 'https://repox.jfrog.io/repox/plugins.gradle.org/'
    }
  }
}
plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "5.1.0"
}

ext {
    release = project.hasProperty('release') && project.getProperty('release')
    buildNumber = System.getProperty("BUILD_NUMBER")
}
// Replaces the version defined in sources, usually x.y-SNAPSHOT, by a version identifying the build.
if (version.endsWith('-SNAPSHOT') && ext.buildNumber != null) {
    def versionSuffix = (version.toString().count('.') == 1 ? ".0.${ext.buildNumber}" : ".${ext.buildNumber}")
    version = version.replace('-SNAPSHOT', versionSuffix)
}

SONATYPE_NEXUS_USERNAME = "$System.env.SONATYPE_NEXUS_USERNAME"
SONATYPE_NEXUS_PASSWORD = "$System.env.SONATYPE_NEXUS_PASSWORD"

signing.keyId = "$System.env.KEY_ID"
signing.password = "$System.env.KEY_PASSWORD"
signing.secretKeyRingFile = secring.gpg

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isJava9Compatible()) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

allprojects {
    repositories {
        mavenCentral()
        maven {
            url "https://repox.jfrog.io/repox/sonarsource"
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
}

dependencies {
    compile 'com.fasterxml.jackson.core:jackson-core:2.4.1'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.4.1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.4.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.assertj:assertj-core:3.10.0'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'org.sonarsource.sonarqube:sonar-plugin-api:7.7'
    testCompile 'org.sonarsource.sonarqube:sonar-plugin-api:7.7'

}


jar {
    manifest {
        def displayVersion = project.hasProperty('buildNumber') ? version.substring(0, version.lastIndexOf('.')) + " (build ${project.buildNumber})" : version
        def buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes(
                'Build-Time': buildDate,
                'Implementation-Build': 'git rev-parse HEAD'.execute().text.trim(),
                'Plugin-BuildDate': buildDate,
                'Plugin-ChildFirstClassLoader': 'false',
                'Plugin-Class': 'com.ultimatesoftware.plugins.sonar.mulesoft.MulesoftPlugin',
                'Plugin-Description': 'MuleSoft JSON report importer',
                'Plugin-Display-Version': displayVersion,
                'Plugin-IssueTrackerUrl': 'https://github.com/UltimateSoftware/sonar-mulesoft',
                'Plugin-Key': 'mulesoft',
                'Plugin-License': 'GNU LGPL 3',
                'Plugin-Name': 'Mulesoft',
                'Plugin-Organization': 'SonarSource',
                'Plugin-OrganizationUrl': 'http://www.ultimatesoftware.com',
                'Plugin-SourcesUrl': 'https://github.com/UltimateSoftware/sonar-mulesoft',
                'Plugin-Version': version,
                'Sonar-Version': '6.7',
                'SonarLint-Supported': 'false',
                'Version': "${version}",
        )
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact tasks.sourcesJar
            artifact tasks.javadocJar
        }
    }
}
